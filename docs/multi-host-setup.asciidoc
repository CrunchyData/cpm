= Multi-Host Server Setup for CPM

== Introduction

A more typical example of a real CPM production deployment is
to utilize multiple servers.  In this configuration, CPM
will let you configure Postgres clusters that span more than
one server.

Here is an example of a multi-host scenario of 2 servers:
[source,bash]
----
espresso.crunchy.lab - 192.168.0.107 (static IP)
bean.crunchy.lab - 192.168.0.108 (static IP)
----

These can be physical or virtual servers.  Both servers are available to run the CPM containers , however only one server will act
as the CPM Admin server (espresso.crunchy.lab).

So we will end up with the following deployment:

 * espresso server
 ** cpm-web container
 ** cpm-admin container
 ** cpm-server container named cpm-espresso
 ** cpm-task container
 ** cpm-collect container
 ** cpm-promdash container
 ** cpm-prometheus container
 ** CPM provisioned containers

 * bean server
 ** cpm-server container named cpm-bean
 ** CPM provisioned containers

== CPM Installation

Perform a developer install on the espresso server as
documented in the Developer Install Guide.
 link:doc.html[Developer Install Guide]

=== Install CPM Dependencies on Secondary Server

Install docker

=== Docker Configuration on Secondary Server

Configure the Docker daemon on the secondary server
to the following:

....
OPTIONS='--selinux-enabled --bip=172.18.42.1/16 --dns-search=crunchy.lab --dns=192.168.0.107 --dns=192.168.0.1 -H unix:///var/run/docker.sock --label host=192.168.0.105 --label profile=SM -H tcp://192.168.0.105:2375'
....

In this Docker configuration you see that we have the following:

 * a different (unique) IP address block than what we used on the espresso server
 * a DNS primary server that points to the skybridge running on the espresso server
 * a 'host' label that specifies the IP address of the bean server
 * listener on the local IP address and Swarm port

.Start up the Docker service
....
sudo systemctl start docker.service
....


=== Copy and Load CPM Docker Images

You will also need to copy the CPM Docker images over to the
coffee server.  For this purpose, you can run on the espresso
server the $CPMROOT/sbin/copy-images.sh script.  This script
will save the CPM Docker images, copy them over to the
coffee server, and install them on the coffee server.
This script assumes you have ssh configured and can scp files to the coffee
server.

=== DNS Configuration for Multi-Server CPM

On each server in a multi-server configuration, you will need
to specify in your /etc/resolv.conf the CPM DNS server you have
deployed.  In this example, we have chosen to run the CPM skybridge
DNS server on the espresso server.

=== Networking for Multi-Server CPM

Each CPM server will need to define a network route to the Docker
bridge IP ranges each server is configured with.  In this
example, we have two Docker bridge IP ranges:

....
espress - 172.17.42.1/16
coffee  - 172.18.42.1/16
....

So, to allow networking between Docker containers running on each
server we define on each server a static route as follows:

.espresso 
....
172.18.0.0/16 via 192.168.0.105 metric 0
....

.coffee
....
172.17.0.0/16 via 192.168.0.107 metric 0
....

These routes can be made permanent by creating a file
in /etc/sysconfig/network-scripts/route-ens3 on each
server and adding the routing rules above.  On your
system, ens3 might be named differently (e.g. eth1), change
the file names accordingly.


After these routes are in place, each docker container on each
server can route to containers on the other servers.

Route examples on virtualbox:
[source,bash]
----
ip route add 172.17.0.0/16 via 192.168.56.103 dev vboxnet0
ip route add 172.18.0.0/16 via 192.168.56.101 dev vboxnet0
ip route add 172.19.0.0/16 via 192.168.56.102 dev vboxnet0
----

=== Swarm Installation

We need to install Swarm on the secondary server.  The most simple
way to perform the install is to just copy the swarm binary over
to the to the secondary server's /usr/local/bin directory.

....
scp swarm root@bean:/usr/local/bin
....

=== Swarm Configuration

So, next we need to add the secondary server (bean) to the Swarm configuration
on the primary server (espresso).  On the primary server, add the bean
server as another Swarm node as follows:
....
swarm manage --host $LOCALIP:8000 nodes://$LOCALIP:2375,$SECONDARYIP:2375 &
....

This line is commented out in the $CPMROOT/sbin/run-swarm.sh script.

On the secondary server, bean, we need to run the Swarm agent as follows:

....
swarm join --addr=$SECONDARYIP:2375 token://$SWARM_TOKEN
....

== Testing

create a docker container on secondary and see if it resolves via skybridge
test swarm on the primary to see both nodes
