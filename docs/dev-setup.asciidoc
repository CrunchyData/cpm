== Developer Setup

Here are the steps required to set up a CPM development environment on a
clean RHEL or Centos 7.1 minimal installation.

This instruction assumes you are using a static IP address of
192.168.0.107 for your CPM server.

=== RHEL Setup 

note that for RHEL 7.1, you will need to add the following repos:
[source,bash]
-----
subscription-manager repos --enable=rhel-7-server-extras-rpms
subscription-manager repos --enable=rhel-7-server-optional-rpms
-----

=== Install Dependencies development machine 

Note that I like to use the PGDG postgres distro instead of the redhat provided postgres!  Here is an example of installing postgres on a Centos 7 box,
replace 'centos' with 'redhat' if installing on a Redhat box:

[source,bash]
-----
sudo yum -y install net-tools bind-utils install golang git docker mercurial sysstat
rpm -Uvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
rpm -Uvh http://yum.postgresql.org/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-1.noarch.rpm
yum install -y nmap-ncat procps-ng postgresql94 postgresql94-contrib postgresql94-server libxslt unzip openssh-clients hostname bind-utils
-----

=== Setup Go Project Structure 

As your development user, create the development directory as follows:
[source,bash]
-----
mkdir -p devproject/src devproject/bin devproject/pkg

export GOPATH=~/devproject
export GOBIN=$GOPATH/bin
export PATH=$GOBIN:$PATH
-----

.Download and Install godep 
[source,bash]
-----
cd devproject
go get github.com/tools/godep
-----

.Download CPM Source 
[source,bash]
-----
go get github.com/crunchydata/crunchy-postgresql-manager
cd src/github.com/crunchydata/crunchy-postgresql-manager
-----

.Download and Restore All Dependencies 
[source,bash]
-----
godep restore
-----

.Compile CPM
[source,bash]
-----
make build
-----

=== Configure Docker 

Edit the docker configuration by editing the OPTIONS parameter as follows:
[source,bash]
-----
vi /etc/sysconfig/docker
OPTIONS='--selinux-enabled --bip=172.17.42.1/16 --dns-search=crunchy.lab --dns=192.168.0.107 --dns=192.168.0.1 -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375  --label hostname=coffee.crunchy.lab --label profile=small'
systemctl enable docker.service
systemctl start docker.service
docker info
-----

In the above example, labels are added for Swarm, including the hostname and a CPM server profile of small to indicate this is a small server in terms of capacity.

=== Build CPM Docker Images 

.Pull down Prometheus images 
[source,bash]
-----
sudo docker pull prom/promdash
sudo docker pull prom/prometheus
-----

.Build Images
[source,bash]
-----
make buildimages
docker images
-----


=== Disable Firewalld 

[source,bash]
-----
systemctl disable firewalld.service
systemctl stop firewalld.service
-----

There is a document, firewall-setup.md, that shows how the CPM ports
can be opened up.

=== Setup skybridge 

CPM services are found using DNS by the various parts of CPM.  When
a Docker image is started, we need it to be registered with a DNS service
and the local machine configured to resolve using that DNS server.

CPM requires a reliable IP address of the host on which it is running.
When a VM is created to develop CPM upon, you would create an extra
Ethernet adapter typically so that you can assign it a static IP
address.  In Virtualbox, this adapter would be a Host-Only adapter
for example.

For Docker to use the new DNS nameserver, you will need to modify
the docker config file /etc/sysconfig/docker.  Add lines in it
like this:
[source,bash]
-----
OPTIONS='--selinux-enabled --bip=172.17.42.1/16 --dns-search=crunchy.lab --dns=192.168.0.106 --dns=192.168.0.1'
-----

This example shows that skybridge is running on 192.168.0.106, I am using
a domain of crunchy.lab, and that my secondary nameserver (from my ISP)
is 192.168.0.1.  This configuration will have all the containers
in CPM trying to use the skybridge DNS nameserver as the primary
nameserver which is required by CPM.

Your /etc/resolv.conf should look similar to this if your network
configuration is set up correctly:
[source,bash]
-----
search crunchy.lab
nameserver 192.168.0.107
nameserver 192.168.0.1
-----

You can make these changes to your /etc/resolv.conf permanent by
adding the following settings to your ethernet adapter configuration
in /etc/syconfig/network-scripts:
[source,bash]
-----
DNS1=192.168.0.107
DNS2=192.168.0.1
DOMAIN=crunchy.lab
PEERDNS=no
-----

This will cause the skybridge DNS nameserver to be queried first.


Pull down skybridge as follows:
[source,bash]
-----
sudo docker pull crunchydata/skybridge
-----

Start skybridge by editing the sbin/run-skybridge.sh script
to specify your local IP address, then run the skybridge container:
[source,bash]
-----
sudo ./sbin/run-skybridge.sh
-----

Configure and Start Swarm
-------------------------

Download the swarm binary as follows, within a new swarm go project:
[source,bash]
-----
export GOPATH=~/swarmproject
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOPATH/bin
mkdir -p $GOPATH/src/github.com/docker/
cd $GOPATH/src/github.com/docker/
git clone https://github.com/docker/swarm
cd swarm
$GOPATH/bin/godep go install
-----

Start swarm up as follows, as root user:
[source,bash]
-----
swarm create
swarm manage --host 192.168.0.107:8000 nodes://192.168.0.107:2375
swarm join --addr=192.168.0.107:2375 token://<<<insert your swarm generated token here>>>
-----

A swarm guide is available at:

link:swarm-setup.html[Swarm Setup]


=== Start CPM Server Agent

After you have successfully compiled CPM and built the CPM Docker images,
on each server that is to run CPM, you will need to start a CPM Server
Agent.  The server agent is run within the cpm-server container on each
server host that will be configured to be used in CPM.

Each container needs to be started with skybridge running and also
have its port 10001 mapped to the local host port 10001.  CPM will
attempt to communicate to each host using this port.  

For this example, I will name the CPM server, newserver.

So, edit the images/cpm-server/run-cpmserver.sh script, and modify the server
ip address to be that of the host you are running the CPM server
upon.

Then run the script which will create a running cpm-server named
cpm-newserver.
[source,bash]
-----
sudo ./run-cpmserver.sh
ping cpm-newserver
-----

If you have the server running, you can test it by doing a GET
to it:
[source,bash]
-----
curl http://cpm-newserver:10001/status
curl http://192.168.0.107:10001/status
-----

=== Running CPM


Modify the run-cpm.sh script by updating the following
environment variable references:
 * INSTALLDIR - the location of your build directory
 * SWARM_MANAGER_URL - the IP address of your dev box

Also, edit or remove the local host port mapping that is
provided in the example to meet your local requirements
for accessing CPM.


You can run CPM by running the following script:
[source,bash]
-----
sudo ./run-cpm.sh
-----

This script will start several Docker containers that make up CPM.  

On the dev host, the following URLs are useful:

 * http://cpm.crunchy.lab:13001 - CPM Web User Interface

 * http://cpm-newserver.crunchy.lab:10001 - CPM Server Agent

 * http://cpm-task.crunchy.lab:13001 - CPM Task Service

 * http://cpm-admin.crunchy.lab:13001 - CPM Admin Service

 * http://cpm-promdash.crunchy.lab:3000 -  Prometheus Dashboard

If you are running CPM on a VM (host-only) and
accessing CPM from the VM host (not the guest), then
you will need to edit the dashboard server
configuration via the PromDash user interface
and specify the prometheus server URL
as http://192.168.56.103:16000.

 * http://cpm-prometheus.crunchy.lab:9090 -  Prometheus DB

If you are running the CPM user interface from outside the dev host
(e.g.  from your vbox host browser), you will need to update
a couple of javascript files with the promdash URL.  By default
these are specified in the javascript as cpm-promdash:3000, this will
not be accessible from your vbox host unless you specify the
skybridge DNS server.

The js files to change are:
servers/servers.js
projects/container-logic.js

Look for occurances of cpm-promdash:3000 and change them to
the static IP address and ports listed above.

=== Login

Browse to the CPM web user interface
user id is cpm
password is cpm
Admin URL is either http://cpm-admin:13001 (on your CPM host)

Initially you will need to first define your CPM server which
is your CPM host (e.g. 192.168.0.107, newserver)

Then you will be ready to start creating PostgreSQL instances.

 * nginx selinux issues

in some cases with selinux enabled, you might see AVC errors, if so, look at this:

http://axilleas.me/en/blog/2013/selinux-policy-for-nginx-and-gitlab-unix-socket-in-fedora-19/


=== Godocs

To see the godocs, install godoc, and start up the godoc server, then
browse to the CPM API documentation:
[source,bash]
-----
go get golang.org/x/tools/cmd/godoc
godoc -http=:6060
-----

=== Logging

Logging of the CPM product containers is as follows:
- cpm-web - logs to /var/cpm/logs on the CPM host
- cpm-admin - logs to fluentd (cpm-efk) by default
- cpm-collect - logs to fluentd (cpm-efk) by default
- cpm-task - logs to fluentd (cpm-efk) by default
- postgres containers - logs to fluentd via syslog

see link:logging.html[Log Aggregation] for more details 

=== Port Mapping

You will likely want to map the CPM addresses to a host IP addressto allow
access from outside of the Docker assigned IP addresses.  To do this you
will add some port mapping to the startup script, run-cpm.sh.

For example, to allow the cpm web interface you would add the following
to the docker run command for the cpm web container:
....
-p 192.168.0.107:13001:13001
....

And for the cpm admin container, you would need to map port 13001 to
the local 14001 port:

....
-p 192.168.0.107:14001:13001
....

Also, for the prometheus dashboard to work, you will need to map its
port to the local host:

....
-p 192.168.0.107:3000:3000
....

and also map the prometheus port to the local host:

....
-p 192.168.0.107:9090:9090
....

You can add the cpm service names to your remote DNS system to resolve
or to your /etc/hosts files to resolve.

You will then need to enter these IP addresses and port numbers in
the cpm web login screen and browser from a remote host.

=== Connecting to Containers Remotely

You can connect to a container's database from a remote server
by adding a static route to the CPM servers Docker bridge range
as follows

.Example
....
ip route add 172.17.0.0/16 via 192.168.0.107 dev ens3
....

With this route in place, you can now access a running container's
database on a remote host.  Make sure that your remote host is not
running Docker on the same Docker bridge IP range.
