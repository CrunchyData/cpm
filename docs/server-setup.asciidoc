
== Server Setup

=== Single-Server Configuration

The typical CPM developer installation will run CPM on a single
server, both CPM and it's requisite DNS bridge (dnsbridge or skybridge).
This is the single-server configuration that most people will
use to demo, hack, and prototype CPM with.

These can be physical or virtual servers.  In this setup, you will be running
all CPM containers on a single server.

==== CPM Installation

You will perform a user-install of CPM, the installer will ask
you which remote servers you want to configure and will copy
the required CPM files to the remote server.  The installer will
also enable and start the required CPM services on each server.

==== DNS Configuration

For CPM, you need to run a skybridge container.  skybridge is a container that provides
a DNS-to-Docker service, that listens to Docker container events, and registers DNS
records for any containers that are created.  It runs a version of skydns
that is a DNS name server.  Therefore, when it starts it will listen on port 53 on 
your dev server.

To use it as a name server, you would register it in your /etc/resolv.conf file
as the primary name server.  For this example of installation, I use the
crunchy.lab DNS domain name.  Here is an example of a configured /etc/resolv.conf
file:
....
search crunchy.lab
nameserver 192.168.0.107
nameserver 192.168.0.1
....

On dev servers that  

Also, on each server, the Docker configuration in /etc/sysconfig/docker
would also need to specify the CPM DNS nameserver as follows:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--dns=192.168.56.101 --dns=192.168.0.1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==== Networking for Multi-Server CPM

For a multi-host CPM deployment, you will define network routes
as follows:

You need to define routes to the other docker servers, we create
a route file in /etc/sysconfig/network-scripts.  The name of the
file is route-xxxx where xxx is the name of the ethernet adapter for our 192.168.56.X network,
for Example:  
	route-enp0s3

For server1, the route values are:
[source,bash]
----
172.19.0.0/16 via 192.168.56.102 metric 0
172.17.0.0/16 via 192.168.56.103 metric 0
----

For admin server, the route values are:
[source,bash]
----
172.18.0.0/16 via 192.168.56.101 metric 0
172.19.0.0/16 via 192.168.56.102 metric 0
----

For server2, the route values are:
[source,bash]
----
172.18.0.0/16 via 192.168.56.101 metric 0
172.17.0.0/16 via 192.168.56.103 metric 0
----

After these routes are in place, each docker container on each
server can route to containers on the other servers.

Route examples on virtualbox:
[source,bash]
----
ip route add 172.17.0.0/16 via 192.168.56.103 dev vboxnet0
ip route add 172.18.0.0/16 via 192.168.56.101 dev vboxnet0
ip route add 172.19.0.0/16 via 192.168.56.102 dev vboxnet0
----

==== Testing

A script is provided to help verify that your environment is
configured correctly:
http://github.com/crunchydata/cpm/network-test.sh
