== Developer Setup

Here are the steps required to set up a CPM development environment on a
clean RHEL or Centos 7.1 minimal installation.

This instruction assumes you are using a static IP address of
192.168.0.107 for your CPM server.

=== Centos/RHEL Setup 

note that for RHEL 7.1, you will need to add the following repos:

....
subscription-manager repos --enable=rhel-7-server-extras-rpms
subscription-manager repos --enable=rhel-7-server-optional-rpms
....

It is always good to run a full update on the operating system before beginning
the CPM install:

....
sudo yum -y update
....

To get started, install some required packages first:
....
sudo yum -y install git mercurial golang wget
....

=== Setup Go Project Structure 

As your development user, create the development directory as follows:

....
mkdir -p devproject/src devproject/bin devproject/pkg
export GOPATH=~/devproject
export GOBIN=$GOPATH/bin
export PATH=$GOBIN:$PATH
export CPMROOT=$GOPATH/src/github.com/crunchydata/crunchy-postgresql-manager
....

.Download CPM Source 
....
cd $GOPATH
go get github.com/crunchydata/crunchy-postgresql-manager
cd $CPMROOT
....

.Install Local Dependencies

To install the local server dependencies, there is a script, sbin/dev-dep-install.sh,
that you will run to do the various package installations:

....
sudo $CPMROOT/sbin/dev-dep-install.sh
....

.Download and Install godep 
....
cd $GOPATH
go get github.com/tools/godep
....

.Download and Restore All Dependencies 
....
cd $CPMROOT
godep restore
....

 * note:  this takes a minute or two to complete *

.Compile CPM
....
make build
....

=== Configure Docker 

Edit the docker configuration (/etc/sysconfig/docker) by editing the OPTIONS parameter as follows:
....
OPTIONS='--selinux-enabled --bip=172.17.42.1/16 --dns-search=crunchy.lab --dns=192.168.0.107 --dns=192.168.0.1 -H unix:///var/run/docker.sock --label host=192.168.0.107 --label profile=SM -H tcp://192.168.0.107:2375'
....

The above configuration specifies the following:
....
 --bip=172.17.42.1/16 - this says for Docker to use this IP range when assiging IP addresses to created containers
 --dns-search=crunchy.lab - this tells Docker to include the crunchy.lab domain inside each container as the search domain
 --dns=192.168.0.107 - this tells Docker to include the 192.168.0.107 address as a primary DNS server address in each container
 --dns=192.168.0.101 - this tells Docker to include the 192.168.0.101 address as a secondary DNS server address in each container
 -H unix://var/run/docker.sock - this tells Docker to accept connections by the docker.sock domain socket
 -H tcp://192.168.0.107:2375 - this tells Docker to accept connections at this IP address, used by Docker Swarm specifically
 --label host=192.168.0.107 - this label is assigned to this Docker server to uniquely identify it within CPM
 --label profile=SM - this label is assigned to this Docker server to categorize it for use within CPM
....


Start docker
....
sudo systemctl enable docker.service
sudo systemctl start docker.service
....

=== Build CPM Docker Images 

.Pull down Prometheus images 

....
sudo docker pull prom/promdash
sudo docker pull prom/prometheus
....

.Build Images

....
cd $CPMROOT
make buildimages
sudo docker images
....


=== Disable Firewalld 

....
sudo systemctl disable firewalld.service
sudo systemctl stop firewalld.service
....

The document, firewall-setup.md, shows how the CPM ports can be opened up.

=== Setup skybridge 

CPM services are found using DNS by the various parts of CPM.  When
a Docker image is started, we need it to be registered with a DNS service
and the local machine configured to resolve using that DNS server.

CPM requires a reliable IP address of the host on which it is running.
When a VM is created to develop CPM upon, you would create an extra
Ethernet adapter typically so that you can assign it a static IP
address.  In Virtualbox, this adapter would be a Host-Only adapter
for example.


The docker OPTIONS configuration above will have all the containers
in CPM trying to use the skybridge DNS nameserver as the primary
nameserver which is required by CPM.

Your /etc/resolv.conf should look similar to this if your network
configuration is set up correctly:

....
search crunchy.lab
nameserver 192.168.0.107
nameserver 192.168.0.1
....

You can make these changes to your /etc/resolv.conf permanent by
adding the following settings to your ethernet adapter configuration
in /etc/syconfig/network-scripts:

....
DNS1=192.168.0.107
DNS2=192.168.0.1
DOMAIN=crunchy.lab
PEERDNS=no
....

This will cause the skybridge DNS nameserver to be queried first.


Pull down skybridge as follows:

....
sudo docker pull crunchydata/skybridge
....

Start skybridge by editing the sbin/run-skybridge.sh script
to specify your local IP address, then run the skybridge container:

....
sudo ./sbin/run-skybridge.sh
....

=== Configure and Start Swarm

Currently, centos 7 only offers golang 1.4.2, and Swarm 1.0.1 requires
golang 1.5.  So for the time being, we will build and run Swarm 1.0.0.

Download the swarm binary as follows, within a new swarm go project:

....
export GOPATH=~/swarmproject
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOPATH/bin
mkdir -p $GOPATH/src/github.com/docker/
cd $GOPATH/src/github.com/docker/
git clone https://github.com/docker/swarm
cd swarm
git checkout v1.0.0
go get github.com/tools/godep
$GOPATH/bin/godep go install
....

This will create the swarm binary located in $GOPATH/swarmproject/bin

Start swarm up by running the $CPMROOT/sbin/run-swarm.sh script, first
modify the script updating the LOCALIP and SWARM_TOKEN variables.

.Get a swarm token
....
swarm create
....

.Run Swarm
....
$CPMROOT/sbin/run-swarm.sh
....

A swarm guide is available at:

link:swarm-setup.html[Swarm Setup]

=== Testing skybridge and Swarm

At this point, it is a good time to test the installation of skybridge,
docker, and docker swarm.

Make sure the following processes are running:

....
ps aux | grep docker
ps aux | grep swarm
sudo docker inspect skybridge
....

You should see the docker and swarm processes running as well as the
skybridge docker container.

Next, create a sample container:

....
docker run --name=tester --hostname=tester -it crunchydata/cpm bash
....

In another terminal, ping the new container:

....
ping tester
....

You should see the tester.crunchy.lab name resolving and responding 
to the ping command.  If not, then there is a configuration error.  
If you can ping the tester container, then proceed on in the installation.

=== Start cpm-efk Logging

The default logging configuration in CPM uses the cpm-efk container
to aggregate logs.  

Prior to starting the cpm-efk container, modify the run-cpm-efk.sh script as documented here:

link:logging.html[Logging Setup]

Start cpm-efk as follows:

....
cd $CPMROOT/images/cpm-efk
sudo ./run-cpm-efk.sh
....

At this point, you can test the cpm-efk container by browsing
to http://192.168.0.107:5601.  You should see the Kibana web console.


=== Start CPM Server Agent

On each server that is to run CPM, you will need to start a CPM Server
Agent.  The server agent is run within the cpm-server container on each
server host that will be configured to be used in CPM.

Each CPM server agent needs to be started with skybridge running and also
have its port 10001 mapped to the local host port 10001.  CPM will
attempt to communicate to each host using this port.  

For this example, I will name the CPM server, newserver.

So, edit the $CPMROOT/images/cpm-server/run-cpmserver.sh script, and modify the server
IP address to be that of the host you are running the CPM server
upon.

Then run the script which will create a running cpm-server named
cpm-newserver.

....
sudo ./run-cpmserver.sh
ping cpm-newserver
....

If you have the server running, you can test it by doing a GET
to it:

....
curl http://cpm-newserver:10001/status
curl http://192.168.0.107:10001/status
....


=== Seed the Server

A one-time initialization of the server is performed by
running the $CPMROOT/sbin/dev-setup.sh script.

This script copies files from the CPM github source
directories into the local system's /var/cpm/ directory.

Modify the sbin/dev-setup.sh script by updating
the source directory environment variable DEVROOT
to match your local dev system.

....
sudo $CPMROOT/sbin/dev-setup.sh
....


=== Running CPM

Modify the $CPMROOT/run-cpm.sh script by updating the following
environment variable references:

 * INSTALLDIR - the location of your build directory
 * LOCAL_IP - the IP address of your dev box

Also, edit or remove the local host port mapping that is
provided in the example to meet your local requirements
for accessing CPM.


You can run CPM by running the following script:

....
sudo ./run-cpm.sh
....

This script will start several Docker containers that make up CPM.  

On the dev host, the following URLs are useful:

 * http://cpm-web.crunchy.lab:13001 - CPM Web User Interface

 * http://cpm-newserver.crunchy.lab:10001 - CPM Server Agent

 * http://cpm-task.crunchy.lab:13001 - CPM Task Service

 * http://cpm-admin.crunchy.lab:13001 - CPM Admin Service

 * http://cpm-promdash.crunchy.lab:3000 -  Prometheus Dashboard

If you are running CPM on a VM (host-only) and
accessing CPM from the VM host (not the guest), then
you will need to edit the dashboard server
configuration via the PromDash user interface
and specify the prometheus server URL
as http://192.168.56.103:16000.

 * http://cpm-prometheus.crunchy.lab:9090 -  Prometheus DB

If you are running the CPM user interface from outside the dev host
(e.g.  from your vbox host browser), you will need to update
a couple of javascript files with the promdash URL.  By default
these are specified in the javascript as cpm-promdash:3000, this will
not be accessible from your vbox host unless you specify the
skybridge DNS server.

The js files to change are:
 * servers/servers.js
 * projects/container-logic.js

Look for occurances of cpm-promdash:3000 and change them to
the static IP address and ports listed above.

=== Login

To start using CPM, first log into the web interface at http://cpm-web:13001

The default superuser ID is *cpm* and the password is *cpm*.  Also, you will
enter the Admin URL value of http://cpm-admin:13001 on the login dialog
screen.

Initially you will need to first define your CPM server which
is your CPM host (e.g. 192.168.0.107, newserver)

Then you will be ready to start creating PostgreSQL instances.

 * nginx selinux issues

in some cases with selinux enabled, you might see AVC errors, if so, look at this:

http://axilleas.me/en/blog/2013/selinux-policy-for-nginx-and-gitlab-unix-socket-in-fedora-19/


=== Godocs

To see the godocs, install godoc, and start up the godoc server, then
browse to the CPM API documentation:

....
go get golang.org/x/tools/cmd/godoc
godoc -http=:6060
....

=== Logging

Logging of the CPM product containers is as follows:
- cpm-web - logs to /var/cpm/logs on the CPM host
- cpm-admin - logs to fluentd (cpm-efk) by default
- cpm-collect - logs to fluentd (cpm-efk) by default
- cpm-task - logs to fluentd (cpm-efk) by default
- postgres containers - logs to fluentd via syslog

see link:logging.html[Log Aggregation] for more details 

=== Port Mapping

You will likely want to map the CPM addresses to a host IP addressto allow
access from outside of the Docker assigned IP addresses.  To do this you
will add some port mapping to the startup script, run-cpm.sh.

For example, to allow the cpm web interface you would add the following
to the docker run command for the cpm web container:

....
-p 192.168.0.107:13001:13001
....

And for the cpm admin container, you would need to map port 13001 to
the local 14001 port:

....
-p 192.168.0.107:14001:13001
....

Also, for the prometheus dashboard to work, you will need to map its
port to the local host:

....
-p 192.168.0.107:3000:3000
....

and also map the prometheus port to the local host:

....
-p 192.168.0.107:9090:9090
....

You can add the cpm service names to your remote DNS system to resolve
or to your /etc/hosts files to resolve.

You will then need to enter these IP addresses and port numbers in
the cpm web login screen and browser from a remote host.

=== Connecting to Containers Remotely

You can connect to a container's database from a remote server
by adding a static route to the CPM servers Docker bridge range
as follows

.Example
....
ip route add 172.17.0.0/16 via 192.168.0.107 dev ens3
....

With this route in place, you can now access a running container's
database on a remote host.  Make sure that your remote host is not
running Docker on the same Docker bridge IP range.
